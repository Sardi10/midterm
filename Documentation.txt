-----------------------------------------------------
Advanced Python Calculator Project Documentation
-----------------------------------------------------

Design Patterns Implementation
-------------------------------
Our project uses several design patterns to improve modularity and scalability:

1. Command Pattern:
   - Each calculator operation (e.g., add, subtract, multiply, divide, and history commands)
     is encapsulated in its own command class that implements a common interface.
   - This enables dynamic loading and execution of commands.
   - Implementation: See the files under app/commands/ (e.g., 
     app/commands/add/add_command.py).

2. Singleton Pattern:
   - The HistoryManager is implemented as a singleton to ensure that all parts of the 
     application share the same calculation history.
   - Implementation: calculator/history_manager.py

3. Facade Pattern:
   - The HistoryFacade provides a simplified interface for interacting with the complex 
     Pandas-based history management system, hiding the underlying CSV I/O and DataFrame 
     manipulations.
   - Implementation: calculator/history_facade.py

4. Factory Method Pattern:
   - The CalculationFactory centralizes the creation of Calculation objects based on the 
     provided operator. This allows for consistent instantiation and easier extension if 
     new operations are added.
   - Implementation: calculator/calculation_factory.py

-----------------------------------------------------
Environment Variables Usage
-----------------------------------------------------
We use environment variables to configure dynamic aspects of the application without 
changing code. For example, our .env file includes:

   APP_ENV=development
   LOG_LEVEL=INFO

In main.py, we load these variables with python-dotenv and use them to set up logging:

   from dotenv import load_dotenv
   load_dotenv()
   log_level = os.getenv("LOG_LEVEL", "INFO").upper()
   logging.basicConfig(
       level=log_level,
       format="%(asctime)s [%(levelname)s] %(message)s",
       handlers=[logging.StreamHandler()]
   )

Implementation: main.py

-----------------------------------------------------
Logging Practices
-----------------------------------------------------
Our logging system records detailed application operations, data manipulations, and 
errors. It differentiates log messages by severity:

   - INFO: Successful operations (e.g., command execution, history save/load).
   - WARNING: Invalid input (e.g., wrong number of arguments).
   - ERROR: Exceptions (with stack traces).

The logging level is dynamically configured via the LOG_LEVEL environment variable.
For example, in app/commands/exit/exit_command.py:

   if args:
       logging.warning("ExitCommand received unexpected arguments: %s", args)
   logging.info("ExitCommand executed. Exiting application.")

Implementation: app/commands/exit/exit_command.py

-----------------------------------------------------
Exception Handling: LBYL vs. EAFP
-----------------------------------------------------
Our code demonstrates both approaches:

1. Look Before You Leap (LBYL):
   - We explicitly check conditions before performing operations. For example, in 
     AddCommand:
         if len(args) != 2:
             print("Usage: add <a> <b>")
             logging.warning("Add command called with invalid number of arguments: %s", args)
             return
   - This proactive check helps prevent errors.

2. Easier to Ask for Forgiveness than Permission (EAFP):
   - We wrap operations in try/except blocks to catch exceptions if they occur.
     For instance, in DivideCommand:
         try:
             result = Calculator.divide(a, b)
         except ZeroDivisionError:
             logging.exception("Division by zero error")
             print("An error occurred: Cannot divide by zero.")
   - This approach allows the code to attempt an operation and handle any issues gracefully.

Implementation Examples:
   - See exception handling in app/commands/divide/divide_command.py and in various history commands.

-----------------------------------------------------
